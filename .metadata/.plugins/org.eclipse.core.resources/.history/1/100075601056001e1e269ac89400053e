package com.example.springweb.samples;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class CallableTask implements Callable<String> {

	String a;

	public CallableTask(String a) {
		this.a = a;
	}

	public String call() throws Exception {
		Thread.sleep(8000);
		return "Hello " + a;
	}

}

public class CallableRunner {
	public static void main(String[] args) throws InterruptedException, ExecutionException {

		ExecutorService e = Executors.newFixedThreadPool(1);

		//Submit takes details from Runnable or Callable and return to Future
		//Future is promise that it will give a result
		Future<String> submit = e.submit(new CallableTask("Aariv "));
		System.out.println("e.submit(new CallableTask(\"Aariv \")) executed");
		//If you want to add get method of Future then we need to add exception
		//This will execute only after Callable task is Submitted/Executed.
		//Remaining code will be executed after below code is executed
		//System.out.println(submit.get());
		
		System.out.println("Main Completed");

	}
}
